## vim: ft=mako:fdm=marker
## OPTION title: (type: string, default: 'Plants Search', tooltip: 'the title')
## OPTION authors: (type: boolean, default: 'false', tooltip: 'if true or 1 include species authorship in the baloon text, if available')
## OPTION snip_acc: (type: boolean, default: 'false', tooltip: 'if true or 1 include accession code in places snippet')
## OPTION folder_sort_order: (type: string, default: 'None', tooltip: 'sort into folders, options are: loc, fam, gen, acc, None')
<%!
from datetime import datetime
from bauble.plugins.report import get_plants_pertinent_to, options
from bauble import gui
from bauble.utils import xml_safe
from polylabel import polylabel

def get_icon_url(plant):
    root = 'https://raw.githubusercontent.com/RoDuth/ghini_report_templates/master/mako_misc/kml_map/map_icons/'
    tree1 = 'tree.png'
    tree2 = 'arbol.png'
    palm = 'palm-tree.png'
    pine = 'pine.png'
    cactus = 'cactus.png'
    flower = 'garden.png'
    grass = 'grass.png'
    leaf = 'leaf.png'

    family_to_icon = {
        'Asteraceae': flower,
        'Arecaceae': palm,
        'Cactaceae': cactus,
        'Pinaceae': pine,
        'Araucariaceae': pine,
        'Podocarpaceae': pine,
        'Cupressaceae': pine,
        'Taxaceae': pine,
        'Sciadopityaceae': pine,
        'Poaceae': grass,
    }

    return root + family_to_icon.get(str(plant.accession.species.genus.family), tree1)

%>\
<?xml version="1.0" encoding="UTF-8"?>
<kml
  xmlns="http://www.opengis.net/kml/2.2"
  xmlns:gx="http://www.google.com/kml/ext/2.2"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
  http://www.opengis.net/kml/2.2
  http://schemas.opengis.net/kml/2.2.0/ogckml22.xsd
  http://www.google.com/kml/ext/2.2
  http://code.google.com/apis/kml/schema/kml22gx.xsd
  "
  >
  <Document id="BBG_Plants">
    <name>${options.get('title')}</name>
    <LookAt>
    ## make an educated guess for LookAt
<%
  extents = {
    'max_x': -180,
    'min_x': 180,
    'max_y': -180,
    'min_y': 180,
  }

  lng = lat = 0

  for plt in get_plants_pertinent_to(values):
    try:
      geo_point = plt.geo_point
    except:
      geo_point = ''

    try:
      geo_line = plt.geo_line
    except:
      geo_line = ''

    try:
      geo_shape = plt.geo_shape
    except:
      geo_shape = ''

    points = geo_shape + ' ' + geo_line + ' ' + geo_point
    points = points.strip()
    if not points:
      continue
    if points != '':
      coords = [[float(x), float(y)] for x, y, _ in [s.split(',') for s in points.split()]]
      x_vals = [x for x, y in coords]
      y_vals = [y for x, y in coords]
      extents['max_x'] = max(x_vals + [extents.get('max_x')])
      extents['min_x'] = min(x_vals + [extents.get('min_x')])
      extents['max_y'] = max(y_vals + [extents.get('max_y')])
      extents['min_y'] = min(y_vals + [extents.get('min_y')])
      lng = (extents.get('max_x') + extents.get('min_x')) / 2
      lat = (extents.get('max_y') + extents.get('min_y')) / 2
      ## these multipliers (100000 and 150000) are arbitrary.  From trial and error they seem to work, nothing more.
      ## They most likely are very dependant on the current resolution...
      rang = abs(extents.get('max_x') - extents.get('min_x')) * 100000
      rang2 = abs(extents.get('max_y') - extents.get('min_y')) * 150000
      rang = max([rang, rang2])
      if rang < 30:
        rang = 30

  ## Bail out if nothing has coordinates.
  try:
    rang
  except NameError:
    raise Exception("Can't find anything to map for the current selection")
%>\
      <longitude>${lng}</longitude>
      <latitude>${lat}</latitude>
      <altitude>0</altitude>
      <heading>0</heading>
      <tilt>0</tilt>
      <range>${rang}</range>
      <altitudeMode>absolute</altitudeMode>
    </LookAt>
    <snippet>generated in ghini.desktop ${datetime.now().replace(microsecond=0)}</snippet>
    <description><![CDATA[
    <table width='350px'>
      <tr>
        <td>search string used:</td>
      </tr>
      <tr>
        <td>
          <code style="background-color:#eee;border-radius:3px;padding:3px;line-height:1.4;">
            ${xml_safe(gui.widgets.main_comboentry.child.get_text())}
          </code>
        </td>
      </tr>
    </table>
    ]]></description>
<%
  sorter = None
  last_sorter = None
  if options.get('folder_sort_order') == 'loc':
    plant_list = sorted(get_plants_pertinent_to(values), key=lambda x: x.location.code)
  elif options.get('folder_sort_order') == 'fam':
    plant_list = sorted(get_plants_pertinent_to(values), key=lambda x: x.accession.species.genus.family.family)
  elif options.get('folder_sort_order') == 'gen':
    plant_list = sorted(get_plants_pertinent_to(values), key=lambda x: x.accession.species.genus.genus)
  elif options.get('folder_sort_order') == 'acc':
    plant_list = sorted(get_plants_pertinent_to(values), key=lambda x: x.accession.code)
  else:
    plant_list = get_plants_pertinent_to(values)

%>\
% for plt in plant_list:
<%
  try:
    geo_point = plt.geo_point
  except:
    geo_point = None

  try:
    geo_line = plt.geo_line
    geo_points = geo_line.split()
  except:
    geo_line = None

  try:
    geo_shape = plt.geo_shape
    plygn = [[[float(x), float(y)] for x, y, _ in [s.split(',') for s in geo_shape.split()]]]
    coords = polylabel(plygn, precision=0.01)
    ## add an extra space so that we can replace the last alititude value with a height below (',0 ')
    geo_shape = geo_shape + ' '
  except:
    geo_shape = None
%>\
% if geo_point or geo_line or geo_shape:
<%
  if options.get('folder_sort_order') == 'loc':
    current_sorter = plt.location.code
  elif options.get('folder_sort_order') == 'fam':
    current_sorter = plt.accession.species.genus.family.family
  elif options.get('folder_sort_order') == 'gen':
    current_sorter = plt.accession.species.genus.genus
  elif options.get('folder_sort_order') == 'acc':
    current_sorter = plt.accession.code
%>\
% if options.get('folder_sort_order') in ['loc', 'fam', 'gen', 'acc'] and current_sorter != sorter:
    % if last_sorter:
    </Folder>
    % endif
    <Folder id="${current_sorter}">
      <name>${current_sorter}</name>
<%
  last_sorter = sorter = current_sorter
%>\
% endif
      ## unique id's are handy for linking to e.g. http://www.myserver.com/mykml.kml#ID_00102
      <Placemark id="ID_${"%05d" % plt.id}">
        <name>${plt.accession.species_str()}</name>
        % if options.get('snip_acc').lower() in ['true', '1']:
        <snippet>${xml_safe(plt)}</snippet>
        % else:
        <snippet/>
        % endif
        <description>
        <![CDATA[
        <h2>${plt.accession.species_str(authors=(options.get('authors').lower() in ['true', '1']), markup=True)}</h2>
        <table>
          <tr>
            <td>ACCESSION:</td>
            <td>${xml_safe(plt)}</td>
          </tr>
          <tr>
            <td>QUANTITY:</td>
            <td>${plt.quantity}</td>
          </tr>
          % if plt.accession.species.default_vernacular_name:
          <tr>
            <td>COMMON:</td>
            <td>${plt.accession.species.default_vernacular_name}</td>
          </tr>
          % endif
          % if plt.accession.species.label_distribution:
          <tr>
            <td>DISTRIBUTION:</td>
            <td>${plt.accession.species.label_distribution}</td>
          </tr>
          % endif
          <tr>
            <td>FAMILY:</td>
            <td>${plt.accession.species.genus.family}</td>
          </tr>
          <tr>
            <td>BED:</td>
            <td>${plt.location.code} ${plt.location.name or ''}</td>
          </tr>
        </table>
        ]]>
        </description>
        % if geo_point:
        <styleUrl>#GeoPoint</styleUrl>
        <Style>
          <IconStyle>
            <Icon>
              <href>
                ${get_icon_url(plt)}
              </href>
            </Icon>
          </IconStyle>
        </Style>
        <Point>
          <extrude>0</extrude>
          <altitudeMode>clampToGround</altitudeMode>
          <coordinates>
            ${geo_point}
          </coordinates>
        </Point>
        % elif geo_line:
        <styleUrl>#GeoLine</styleUrl>
        <Style>
          <IconStyle>
            <Icon>
              <href>
                ${get_icon_url(plt)}
              </href>
            </Icon>
          </IconStyle>
        </Style>
        <MultiGeometry>
          <LineString>
            <extrude>1</extrude>
            <altitudeMode>relativeToGround</altitudeMode>
            <coordinates>
              ${geo_line}
            </coordinates>
          </LineString>
        % for point in geo_points:
          <Point>
            <coordinates>
              ${point}
            </coordinates>
          </Point>
        % endfor
        </MultiGeometry>
        % elif geo_shape:
        <styleUrl>#GeoShape</styleUrl>
        <Style>
          <IconStyle>
            <Icon>
              <href>
                ${get_icon_url(plt)}
              </href>
            </Icon>
          </IconStyle>
        </Style>
        <MultiGeometry>
          <Polygon>
            <extrude>1</extrude>
            <altitudeMode>relativeToGround</altitudeMode>
            <outerBoundaryIs>
              <LinearRing>
                <coordinates>
                ## using relativeToGround with a minimal altitude gets rid of shading issues (zooming in/out with nearmap or osm overlays)
                  ${geo_shape.replace(',0 ', ',0.2 ')}
                </coordinates>
              </LinearRing>
            </outerBoundaryIs>
          </Polygon>
          <Point>
            <coordinates>
              ${coords[0]},${coords[1]},0
            </coordinates>
          </Point>
        </MultiGeometry>
        % endif
      </Placemark>
% endif
% endfor
% if options.get('folder_sort_order') in ['loc', 'fam', 'gen', 'acc']:
    </Folder>
% endif
    ## </Folder>
      <Style id="GeoShape">
        <BalloonStyle>
          <text><font face="Arial">$[description]</font></text>
          ## <text>$[description]</text>
        </BalloonStyle>
        <IconStyle>
          <scale>1.000000</scale>
        </IconStyle>
        <LabelStyle>
          ## <color>ff0075d5</color>
          <color>ff00ffff</color>
          <colorMode>normal</colorMode>
          <scale>0.800000</scale>
        </LabelStyle>
        <LineStyle>
          <color>ff00ff00</color>
          <width>2.000000</width>
        </LineStyle>
        <PolyStyle>
          <color>5000ff00</color>
          <outline>1</outline>
        </PolyStyle>
      </Style>
      <Style id="GeoPoint">
        <BalloonStyle>
          <text><font face="Arial">$[description]</font></text>
          ## <text>$[description]</text>
        </BalloonStyle>
        <IconStyle>
          <scale>1.000000</scale>
        </IconStyle>
        <LabelStyle>
          <color>ff00ffff</color>
          <colorMode>normal</colorMode>
          <scale>0.800000</scale>
        </LabelStyle>
      </Style>
      <Style id="GeoLine">
        <BalloonStyle>
          <text><font face="Arial">$[description]</font></text>
          ## <text>$[description]</text>
        </BalloonStyle>
        <IconStyle>
          <scale>1.000000</scale>
        </IconStyle>
        <LabelStyle>
          <color>ff00ffff</color>
          <colorMode>normal</colorMode>
          <scale>0.800000</scale>
        </LabelStyle>
        <LineStyle>
          <color>ff00a838</color>
          <width>2.000000</width>
        </LineStyle>
      </Style>
  </Document>
</kml>
