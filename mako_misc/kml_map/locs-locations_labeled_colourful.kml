## vim:set ft=mako:
<%!
from bauble.plugins.report import get_locations_pertinent_to
## from https://github.com/Twista/python-polylabel
## >>>
from math import sqrt
import time

try:
    # Python3
    from queue import PriorityQueue
    from math import inf
except ImportError:
    # Python2
    from Queue import PriorityQueue

    inf = float("inf")


def _point_to_polygon_distance(x, y, polygon):
    inside = False
    min_dist_sq = inf

    for ring in polygon:
        b = ring[-1]
        for a in ring:

            if ((a[1] > y) != (b[1] > y) and
                    (x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0])):
                inside = not inside

            min_dist_sq = min(min_dist_sq, _get_seg_dist_sq(x, y, a, b))
            b = a

    result = sqrt(min_dist_sq)
    if not inside:
        return -result
    return result


def _get_seg_dist_sq(px, py, a, b):
    x = a[0]
    y = a[1]
    dx = b[0] - x
    dy = b[1] - y

    if dx != 0 or dy != 0:
        t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy)

        if t > 1:
            x = b[0]
            y = b[1]

        elif t > 0:
            x += dx * t
            y += dy * t

    dx = px - x
    dy = py - y

    return dx * dx + dy * dy


class Cell:
    def __init__(self, x, y, h, polygon):
        self.h = h
        self.y = y
        self.x = x
        self.d = _point_to_polygon_distance(x, y, polygon)
        self.max = self.d + self.h * sqrt(2)

    def __lt__(self, other):
        return self.max < other.max

    def __lte__(self, other):
        return self.max <= other.max

    def __gt__(self, other):
        return self.max > other.max

    def __gte__(self, other):
        return self.max >= other.max

    def __eq__(self, other):
        return self.max == other.max


def _get_centroid_cell(polygon):
    area = 0
    x = 0
    y = 0
    points = polygon[0]
    b = points[-1]  # prev
    for a in points:
        f = a[0] * b[1] - b[0] * a[1]
        x += (a[0] + b[0]) * f
        y += (a[1] + b[1]) * f
        area += f * 3
        b = a
    if area == 0:
        return Cell(points[0][0], points[0][1], 0, polygon)
    return Cell(x / area, y / area, 0, polygon)


def polylabel(polygon, precision=1.0, debug=False, with_distance=False):
    # find bounding box
    first_item = polygon[0][0]
    min_x = first_item[0]
    min_y = first_item[1]
    max_x = first_item[0]
    max_y = first_item[1]
    for p in polygon[0]:
        if p[0] < min_x:
            min_x = p[0]
        if p[1] < min_y:
            min_y = p[1]
        if p[0] > max_x:
            max_x = p[0]
        if p[1] > max_y:
            max_y = p[1]

    width = max_x - min_x
    height = max_y - min_y
    cell_size = min(width, height)
    h = cell_size / 2.0

    cell_queue = PriorityQueue()

    if cell_size == 0:
        if with_distance:
            return [min_x, min_y], None
        return [min_x, min_y]

    # cover polygon with initial cells
    x = min_x
    while x < max_x:
        y = min_y
        while y < max_y:
            c = Cell(x + h, y + h, h, polygon)
            y += cell_size
            cell_queue.put((-c.max, time.time(), c))
        x += cell_size

    best_cell = _get_centroid_cell(polygon)

    bbox_cell = Cell(min_x + width / 2, min_y + height / 2, 0, polygon)
    if bbox_cell.d > best_cell.d:
        best_cell = bbox_cell

    num_of_probes = cell_queue.qsize()
    while not cell_queue.empty():
        _, __, cell = cell_queue.get()

        if cell.d > best_cell.d:
            best_cell = cell

            if debug:
                print('found best {} after {} probes'.format(
                    round(1e4 * cell.d) / 1e4, num_of_probes))

        if cell.max - best_cell.d <= precision:
            continue

        h = cell.h / 2
        c = Cell(cell.x - h, cell.y - h, h, polygon)
        cell_queue.put((-c.max, time.time(), c))
        c = Cell(cell.x + h, cell.y - h, h, polygon)
        cell_queue.put((-c.max, time.time(), c))
        c = Cell(cell.x - h, cell.y + h, h, polygon)
        cell_queue.put((-c.max, time.time(), c))
        c = Cell(cell.x + h, cell.y + h, h, polygon)
        cell_queue.put((-c.max, time.time(), c))
        num_of_probes += 4

    if debug:
        print('num probes: {}'.format(num_of_probes))
        print('best distance: {}'.format(best_cell.d))
    if with_distance:
        return [best_cell.x, best_cell.y], best_cell.d
    return [best_cell.x, best_cell.y]
## <<<
%>\
<?xml version="1.0" encoding="UTF-8"?>
<kml
  xmlns="http://www.opengis.net/kml/2.2"
  xmlns:gx="http://www.google.com/kml/ext/2.2"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
  http://www.opengis.net/kml/2.2
  http://schemas.opengis.net/kml/2.2.0/ogckml22.xsd
  http://www.google.com/kml/ext/2.2
  http://code.google.com/apis/kml/schema/kml22gx.xsd
  "
  >
  <Document id="bbg_locs">
    <name>BBG garden beds</name>
    <snippet/>
    <LookAt>
<%
  extents = {
    'max_x': -180,
    'min_x': 180,
    'max_y': -180,
    'min_y': 180,
  }

  lng = lat = 0

  for loc in get_locations_pertinent_to(values):
    _, _, polygon = str(loc.description).partition("\n\n{'polygon': ")
    if not polygon:
      continue
    if polygon != '':
      polygon = polygon[1:-2]
      plygn = [[float(x), float(y)] for x, y, _ in [s.split(',') for s in polygon.split()]]
      x_vals = [x for x, y in plygn]
      y_vals = [y for x, y in plygn]
      extents['max_x'] = max(x_vals + [extents.get('max_x')])
      extents['min_x'] = min(x_vals + [extents.get('min_x')])
      extents['max_y'] = max(y_vals + [extents.get('max_y')])
      extents['min_y'] = min(y_vals + [extents.get('min_y')])
      lng = (extents.get('max_x') + extents.get('min_x')) / 2
      lat = (extents.get('max_y') + extents.get('min_y')) / 2
      rang = abs(extents.get('max_x') - extents.get('min_x')) * 100000
      rang2 = abs(extents.get('max_y') - extents.get('min_y')) * 150000
      rang = max([rang, rang2])
%>/
      <longitude>${lng}</longitude>
      <latitude>${lat}</latitude>
      <altitude>0</altitude>
      <heading>0</heading>
      <tilt>0</tilt>
      <range>${rang}</range>
      <gx:altitudeMode>relativeToSeaFloor</gx:altitudeMode>
    </LookAt>
    <description><![CDATA[]]></description>
    <Folder id="FeatureLayer0">
      <name>beds</name>
      <snippet/>
      <description><![CDATA[]]></description>
      ## TODO what to do if we have no coords?  or even if we only have a single point or something?
%for style, loc in enumerate(get_locations_pertinent_to(values)):
<%
    description, _, polygon = str(loc.description).partition("\n\n{'polygon': ")
    if not polygon:
      continue
    description = '' if description == 'None' else description.strip()
    if polygon != '':
      polygon = polygon[1:-2]
      plygn = [[[float(x), float(y)] for x, y, _ in [s.split(',') for s in polygon.split()]]]
      coords = polylabel(plygn, precision=0.0001)
    polystyle = style % 6
%>\
      <Placemark id="ID_${"%05d" % loc.id}">
        <name>${loc.code}</name>
        <snippet/>
        <description>
        <![CDATA[
        <h3>${loc.name or ''}</h3>
        <p>${description}</p>
        ]]>
        </description>
        <styleUrl>#PolyStyle0${polystyle}</styleUrl>
        <MultiGeometry>
          <Point>
            <coordinates>
              ${coords[0]},${coords[1]},0
            </coordinates>
          </Point>
          <Polygon>
            <extrude>1</extrude>
            <altitudeMode>relativeToGround</altitudeMode>
            <outerBoundaryIs>
              <LinearRing>
                <coordinates>
                ## using relativeToGround with a minimal altitude gets rid of shading issues (zooming in/out with nearmap or osm overlays)
                  ${polygon.replace(',0 ', ',0.2 ')}
                </coordinates>
              </LinearRing>
            </outerBoundaryIs>
          </Polygon>
        </MultiGeometry>
      </Placemark>
% endfor
    </Folder>
    <Style id="PolyStyle00">
      <BalloonStyle>
      <text><font face="Arial">$[description]</font></text>
      ## <text>$[description]</text>
      </BalloonStyle>
      <IconStyle>
      ## Hide the pushpin, works in Google Earth but not AGOL
        <scale>0</scale>
      </IconStyle>
      <LabelStyle>
        <color>ffffffff</color>
        <colorMode>normal</colorMode>
      </LabelStyle>
      <LineStyle>
        <color>ff0000ff</color>
        <width>2.000000</width>
      </LineStyle>
      <PolyStyle>
        <color>300000ff</color>
        <outline>1</outline>
      </PolyStyle>
    </Style>
    <Style id="PolyStyle01">
      <BalloonStyle>
      <text><font face="Arial">$[description]</font></text>
      ## <text>$[description]</text>
      </BalloonStyle>
      <IconStyle>
      ## Hide the pushpin, works in Google Earth but not AGOL
        <scale>0</scale>
      </IconStyle>
      <LabelStyle>
        <color>ffffffff</color>
        <colorMode>normal</colorMode>
      </LabelStyle>
      <LineStyle>
        <color>ff00ff00</color>
        <width>2.000000</width>
      </LineStyle>
      <PolyStyle>
        <color>3000ff00</color>
        <outline>1</outline>
      </PolyStyle>
    </Style>
    <Style id="PolyStyle02">
      <BalloonStyle>
      <text><font face="Arial">$[description]</font></text>
      ## <text>$[description]</text>
      </BalloonStyle>
      <IconStyle>
      ## Hide the pushpin, works in Google Earth but not AGOL
        <scale>0</scale>
      </IconStyle>
      <LabelStyle>
        <color>ffffffff</color>
        <colorMode>normal</colorMode>
      </LabelStyle>
      <LineStyle>
        <color>ffff0000</color>
        <width>2.000000</width>
      </LineStyle>
      <PolyStyle>
        <color>30ff0000</color>
        <outline>1</outline>
      </PolyStyle>
    </Style>
    <Style id="PolyStyle03">
      <BalloonStyle>
      <text><font face="Arial">$[description]</font></text>
      ## <text>$[description]</text>
      </BalloonStyle>
      <IconStyle>
      ## Hide the pushpin, works in Google Earth but not AGOL
        <scale>0</scale>
      </IconStyle>
      <LabelStyle>
        <color>ffffffff</color>
        <colorMode>normal</colorMode>
      </LabelStyle>
      <LineStyle>
        <color>ff00ffff</color>
        <width>2.000000</width>
      </LineStyle>
      <PolyStyle>
        <color>3000ffff</color>
        <outline>1</outline>
      </PolyStyle>
    </Style>
    <Style id="PolyStyle04">
      <BalloonStyle>
      <text><font face="Arial">$[description]</font></text>
      ## <text>$[description]</text>
      </BalloonStyle>
      <IconStyle>
      ## Hide the pushpin, works in Google Earth but not AGOL
        <scale>0</scale>
      </IconStyle>
      <LabelStyle>
        <color>ffffffff</color>
        <colorMode>normal</colorMode>
      </LabelStyle>
      <LineStyle>
        <color>ffffff00</color>
        <width>2.000000</width>
      </LineStyle>
      <PolyStyle>
        <color>30ffff00</color>
        <outline>1</outline>
      </PolyStyle>
    </Style>
    <Style id="PolyStyle05">
      <BalloonStyle>
      <text><font face="Arial">$[description]</font></text>
      ## <text>$[description]</text>
      </BalloonStyle>
      <IconStyle>
      ## Hide the pushpin, works in Google Earth but not AGOL
        <scale>0</scale>
      </IconStyle>
      <LabelStyle>
        <color>ffffffff</color>
        <colorMode>normal</colorMode>
      </LabelStyle>
      <LineStyle>
        <color>ffff00ff</color>
        <width>2.000000</width>
      </LineStyle>
      <PolyStyle>
        <color>30ff00ff</color>
        <outline>1</outline>
      </PolyStyle>
    </Style>
  </Document>
</kml>
